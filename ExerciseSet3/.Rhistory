data = npf
data$class4 = factor(data$class4)
set.seed(1)
n <- nrow(data)
p <- ncol(data)-1
test.ratio <- .2 # ratio of test/train samples
n.test <- round(n*test.ratio)
tr <- sample(1:n,n.test)
data.val <- data[tr,]
data.train <- data[-tr,]
install.packages("randomForest")
library(randomForest)
fit_RF <- randomForest(class4 ~ . , data.train)
pred_RF <- predict(fit_RF, newdata = data.val, type="prob")
pred_RF
class_RF <- predict(fit_RF,newdata=data.val, type="response")
class_RF
install.packages("randomForest")
#install.packages("randomForest")
library(randomForest)
fit_RF <- randomForest(class4 ~ . , data.train)
pred_RF <- predict(fit_RF, newdata = data.val, type="prob")
pred_RF
class_RF <- predict(fit_RF,newdata=data.val, type="response")
class_RF
#install.packages("randomForest")
library(randomForest)
fit_RF <- randomForest(class4 ~ . , data.train)
pred_RF <- predict(fit_RF, newdata = data.val, type="prob")
#pred_RF
class_RF <- predict(fit_RF,newdata=data.val, type="response")
#class_RF
accuracy = mean(data.val$class4 == class_RF)
accuracy
data = npf
data$class4 = factor(data$class4)
set.seed(1)
n <- nrow(data)
p <- ncol(data)-1
test.ratio <- .5 # ratio of test/train samples
n.test <- round(n*test.ratio)
tr <- sample(1:n,n.test)
data.val <- data[tr,]
data.train <- data[-tr,]
#install.packages("randomForest")
library(randomForest)
fit_RF <- randomForest(class4 ~ . , data.train)
pred_RF <- predict(fit_RF, newdata = data.val, type="prob")
#pred_RF
class_RF <- predict(fit_RF,newdata=data.val, type="response")
#class_RF
accuracy = mean(data.val$class4 == class_RF)
accuracy
Matrix <- pr.out$rotation
Matrix <- pr.out$rotation
Matrix
loadings <- as.data.frame(pr.out$x)
View(loadings)
loadings
pr.out = prcomp ( npf[-length(npf)] , scale = TRUE )
pr.var = pr.out$sdev ^2
pve = pr.var/sum(pr.var)
pve
plot ( pve , xlab =" Principal Component " , ylab =" Proportio n of Variance Explained " , ylim = c (0 ,1) , type = 'b')
plot ( cumsum ( pve ) , xlab =" Principal Component " , ylab =" Cumulative Proportio n of Variance Explained " , ylim = c (0 ,1),type ='b')
pc = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:11]
loadings
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:11]
pca_train2 <- cbind(loadings2,data.train$class4)
fit_RF2 <- randomForest(class4 ~ . , pca_train2)
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:11]
pca_train2 <- cbind(loadings2,data.train$class4)
pca_train2
pca_train2
pca_train2 <- rbind(loadings2,data.train$class4)
pca_train2
pca_train2 <- cbind(loadings2,data.train$class4)
pca_train2
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:11]
pca_train2 = as.data.frame(loadings2)
pca_train2
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:11]
pca_train2 = as.data.frame(loadings2)
pca_train2$class4 = data.train$class4
pca_train2
fit_RF2 <- randomForest(class4 ~ . , pca_train2)
pca_test <- data.test[1:11]
pca_test <- data.val[1:11]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_test3 <- as.data.frame(pca_test2[1:11])
pca_val$class4 <- data.val$class4
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:11])
pca_val$class4 <- data.val$class4
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:11])
pca_val$class4 <- data.val$class4
predict_val <- predict(fit_RF2,pca_val)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:11])
pca_val$class4 <- data.val$class4
predict_val <- predict(fit_RF2,pca_val)
accuracy = mean(data.val$class4 == predict_val)
accuracy
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:5]
pca_train2 = as.data.frame(loadings2)
pca_train2$class4 = data.train$class4
fit_RF2 <- randomForest(class4 ~ . , pca_train2)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:11])
pca_val$class4 <- data.val$class4
predict_val <- predict(fit_RF2,pca_val)
accuracy = mean(data.val$class4 == predict_val)
accuracy
n = 5 #nbr of features
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:n]
pca_train2 = as.data.frame(loadings2)
pca_train2$class4 = data.train$class4
fit_RF2 <- randomForest(class4 ~ . , pca_train2)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:n])
pca_val$class4 <- data.val$class4
predict_val <- predict(fit_RF2,pca_val)
accuracy = mean(data.val$class4 == predict_val)
accuracy
n = 5 #nbr of features
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:n]
pca_train2 = as.data.frame(loadings2)
pca_train2$class4 = data.train$class4
fit_RF2 <- randomForest(class4 ~ . , pca_train2)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:n])
pca_val$class4 <- data.val$class4
predict_val <- predict(fit_RF2,pca_val)
accuracy = mean(data.val$class4 == predict_val)
accuracy
n = 1 #nbr of features
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:n]
pca_train2 = as.data.frame(loadings2)
pca_train2$class4 = data.train$class4
fit_RF2 <- randomForest(class4 ~ . , pca_train2)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:n])
pca_val$class4 <- data.val$class4
predict_val <- predict(fit_RF2,pca_val)
accuracy = mean(data.val$class4 == predict_val)
accuracy
n = 2 #nbr of features
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:n]
pca_train2 = as.data.frame(loadings2)
pca_train2$class4 = data.train$class4
fit_RF2 <- randomForest(class4 ~ . , pca_train2)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:n])
pca_val$class4 <- data.val$class4
predict_val <- predict(fit_RF2,pca_val)
accuracy = mean(data.val$class4 == predict_val)
accuracy
n = 3 #nbr of features
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:n]
pca_train2 = as.data.frame(loadings2)
pca_train2$class4 = data.train$class4
fit_RF2 <- randomForest(class4 ~ . , pca_train2)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:n])
pca_val$class4 <- data.val$class4
predict_val <- predict(fit_RF2,pca_val)
accuracy = mean(data.val$class4 == predict_val)
accuracy
n = 15 #nbr of features
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:n]
pca_train2 = as.data.frame(loadings2)
pca_train2$class4 = data.train$class4
fit_RF2 <- randomForest(class4 ~ . , pca_train2)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:n])
pca_val$class4 <- data.val$class4
predict_val <- predict(fit_RF2,pca_val)
accuracy = mean(data.val$class4 == predict_val)
accuracy
n = 11 #nbr of features
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:n]
pca_train2 = as.data.frame(loadings2)
pca_train2$class4 = data.train$class4
fit_RF2 <- randomForest(class4 ~ . , pca_train2)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:n])
pca_val$class4 <- data.val$class4
predict_val <- predict(fit_RF2,pca_val)
accuracy = mean(data.val$class4 == predict_val)
accuracy
pr.out
pr.out = prcomp ( data.train[-length(npf)] , scale = TRUE )
pr.var = pr.out$sdev ^2
pve = pr.var/sum(pr.var)
pve
plot ( pve , xlab =" Principal Component " , ylab =" Proportio n of Variance Explained " , ylim = c (0 ,1) , type = 'b')
plot ( cumsum ( pve ) , xlab =" Principal Component " , ylab =" Cumulative Proportio n of Variance Explained " , ylim = c (0 ,1),type ='b')
n = 11 #nbr of features
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:n]
pca_train2 = as.data.frame(loadings2)
pca_train2$class4 = data.train$class4
fit_RF2 <- randomForest(class4 ~ . , pca_train2)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:n])
pca_val$class4 <- data.val$class4
predict_val <- predict(fit_RF2,pca_val)
accuracy = mean(data.val$class4 == predict_val)
accuracy
pr.out = prcomp ( data.train[-length(npf)] , scale = TRUE )
pr.var = pr.out$sdev ^2
pve = pr.var/sum(pr.var)
pve
plot ( pve , xlab =" Principal Component " , ylab =" Proportio n of Variance Explained " , ylim = c (0 ,1) , type = 'b')
plot ( cumsum ( pve ) , xlab =" Principal Component " , ylab =" Cumulative Proportio n of Variance Explained " , ylim = c (0 ,1),type ='b')
n = 5 #nbr of features
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:n]
pca_train2 = as.data.frame(loadings2)
pca_train2$class4 = data.train$class4
fit_RF2 <- randomForest(class4 ~ . , pca_train2)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:n])
pca_val$class4 <- data.val$class4
predict_val <- predict(fit_RF2,pca_val)
accuracy = mean(data.val$class4 == predict_val)
accuracy
pr.out = prcomp ( data.train[-length(npf)] , scale = TRUE )
pr.var = pr.out$sdev ^2
pve = pr.var/sum(pr.var)
pve
plot ( pve , xlab =" Principal Component " , ylab =" Proportio n of Variance Explained " , ylim = c (0 ,1) , type = 'b')
plot ( cumsum ( pve ) , xlab =" Principal Component " , ylab =" Cumulative Proportio n of Variance Explained " , ylim = c (0 ,1),type ='b')
n = 15 #nbr of features
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:n]
pca_train2 = as.data.frame(loadings2)
pca_train2$class4 = data.train$class4
fit_RF2 <- randomForest(class4 ~ . , pca_train2)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:n])
pca_val$class4 <- data.val$class4
predict_val <- predict(fit_RF2,pca_val)
accuracy = mean(data.val$class4 == predict_val)
accuracy
accuracy = 1:20
pr.out = prcomp ( data.train[-length(npf)] , scale = TRUE )
pr.var = pr.out$sdev ^2
pve = pr.var/sum(pr.var)
pve
plot ( pve , xlab =" Principal Component " , ylab =" Proportio n of Variance Explained " , ylim = c (0 ,1) , type = 'b')
plot ( cumsum ( pve ) , xlab =" Principal Component " , ylab =" Cumulative Proportio n of Variance Explained " , ylim = c (0 ,1),type ='b')
accuracy = 1:20
for (n in 1:20) {
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:n]
pca_train2 = as.data.frame(loadings2)
pca_train2$class4 = data.train$class4
fit_RF2 <- randomForest(class4 ~ . , pca_train2)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:n])
pca_val$class4 <- data.val$class4
predict_val <- predict(fit_RF2,pca_val)
accuracy[n] = mean(data.val$class4 == predict_val)
}
accuracy
pr.out = prcomp ( data.train[-length(npf)] , scale = TRUE )
pr.var = pr.out$sdev ^2
pve = pr.var/sum(pr.var)
pve
plot ( pve , xlab =" Principal Component " , ylab =" Proportio n of Variance Explained " , ylim = c (0 ,1) , type = 'b')
plot ( cumsum ( pve ) , xlab =" Principal Component " , ylab =" Cumulative Proportio n of Variance Explained " , ylim = c (0 ,1),type ='b')
accuracy = 1:20
for (n in 1:50) {
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:n]
pca_train2 = as.data.frame(loadings2)
pca_train2$class4 = data.train$class4
fit_RF2 <- randomForest(class4 ~ . , pca_train2)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:n])
pca_val$class4 <- data.val$class4
predict_val <- predict(fit_RF2,pca_val)
accuracy[n] = mean(data.val$class4 == predict_val)
}
accuracy
accuracy
set.seed(0)
pr.out = prcomp ( data.train[-length(npf)] , scale = TRUE )
pr.var = pr.out$sdev ^2
pve = pr.var/sum(pr.var)
accuracy = 1:20;
for (n in 1:50) {
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:n]
pca_train2 = as.data.frame(loadings2)
pca_train2$class4 = data.train$class4
fit_RF2 <- randomForest(class4 ~ . , pca_train2)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:n])
pca_val$class4 <- data.val$class4
predict_val <- predict(fit_RF2,pca_val)
accuracy[n] = mean(data.val$class4 == predict_val)
}
accuracy
set.seed(0)
pr.out = prcomp ( data.train[-length(npf)] , scale = TRUE )
pr.var = pr.out$sdev ^2
pve = pr.var/sum(pr.var)
accuracy = 1:20;
for (n in 1:50) {
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:n]
pca_train2 = as.data.frame(loadings2)
pca_train2$class4 = data.train$class4
fit_RF2 <- randomForest(class4 ~ . , pca_train2)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:n])
pca_val$class4 <- data.val$class4
predict_val <- predict(fit_RF2,pca_val)
accuracy[n] = mean(data.val$class4 == predict_val)
}
accuracy
set.seed(0)
#install.packages("randomForest")
library(randomForest)
fit_RF <- randomForest(class4 ~ . , data.train)
pred_RF <- predict(fit_RF, newdata = data.val, type="prob")
#pred_RF
class_RF <- predict(fit_RF,newdata=data.val, type="response")
#class_RF
accuracy = mean(data.val$class4 == class_RF)
accuracy
set.seed(0)
#install.packages("randomForest")
library(randomForest)
fit_RF <- randomForest(class4 ~ . , data.train)
pred_RF <- predict(fit_RF, newdata = data.val, type="prob")
#pred_RF
class_RF <- predict(fit_RF,newdata=data.val, type="response")
#class_RF
accuracy = mean(data.val$class4 == class_RF)
accuracy
set.seed(0)
#install.packages("randomForest")
library(randomForest)
fit_RF <- randomForest(class4 ~ . , data.train)
pred_RF <- predict(fit_RF, newdata = data.val, type="prob")
#pred_RF
class_RF <- predict(fit_RF,newdata=data.val, type="response")
#class_RF
accuracy = mean(data.val$class4 == class_RF)
accuracy
set.seed(0)
#install.packages("randomForest")
library(randomForest)
fit_RF <- randomForest(class4 ~ . , data.train)
pred_RF <- predict(fit_RF, newdata = data.val, type="prob")
#pred_RF
class_RF <- predict(fit_RF,newdata=data.val, type="response")
#class_RF
accuracy = mean(data.val$class4 == class_RF)
accuracy
set.seed(0)
#install.packages("randomForest")
library(randomForest)
fit_RF <- randomForest(class4 ~ . , data.train)
pred_RF <- predict(fit_RF, newdata = data.val, type="prob")
#pred_RF
class_RF <- predict(fit_RF,newdata=data.val, type="response")
#class_RF
accuracy = mean(data.val$class4 == class_RF)
accuracy
data = npf
data$class4 = factor(data$class4)
set.seed(1)
n <- nrow(data)
p <- ncol(data)-1
test.ratio <- .5 # ratio of test/train samples
n.test <- round(n*test.ratio)
tr <- sample(1:n,n.test)
data.val <- data[tr,]
data.train <- data[-tr,]
set.seed(0)
#install.packages("randomForest")
library(randomForest)
fit_RF <- randomForest(class4 ~ . , data.train)
pred_RF <- predict(fit_RF, newdata = data.val, type="prob")
#pred_RF
class_RF <- predict(fit_RF,newdata=data.val, type="response")
#class_RF
accuracy = mean(data.val$class4 == class_RF)
accuracy
set.seed(0)
#install.packages("randomForest")
library(randomForest)
fit_RF <- randomForest(class4 ~ . , data.train)
pred_RF <- predict(fit_RF, newdata = data.val, type="prob")
#pred_RF
class_RF <- predict(fit_RF,newdata=data.val, type="response")
#class_RF
accuracy = mean(data.val$class4 == class_RF)
accuracy
set.seed(0)
#install.packages("randomForest")
library(randomForest)
fit_RF <- randomForest(class4 ~ . , data.train)
pred_RF <- predict(fit_RF, newdata = data.val, type="prob")
#pred_RF
class_RF <- predict(fit_RF,newdata=data.val, type="response")
#class_RF
accuracy = mean(data.val$class4 == class_RF)
accuracy
set.seed(0)
pr.out = prcomp ( data.train[-length(npf)] , scale = TRUE )
pr.var = pr.out$sdev ^2
pve = pr.var/sum(pr.var)
accuracy = 1:20;
for (n in 1:50) {
pca = pr.out
loadings <- as.data.frame(pca$x)
loadings2 <- loadings[1:n]
pca_train2 = as.data.frame(loadings2)
pca_train2$class4 = data.train$class4
fit_RF2 <- randomForest(class4 ~ . , pca_train2)
pca_test <- data.val[-length(data.val)]
pca_test2 <- predict(pca, newdata = pca_test)
pca_test2 <- as.data.frame(pca_test2)
pca_val <- as.data.frame(pca_test2[1:n])
pca_val$class4 <- data.val$class4
predict_val <- predict(fit_RF2,pca_val)
accuracy[n] = mean(data.val$class4 == predict_val)
}
accuracy
install.packages("clue")
![17a_distances](17a_D.png)
![17a_distances](17a_D.png)
